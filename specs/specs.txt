# specs.txt - Detailed Project Specifications for StaffAI Enhanced Bot

## 1. Project Goal
To create a configurable, interactive Discord bot that leverages an external LLM API (OpenWebUI compatible) for generating responses.
The bot should manage conversation context persistently (per user per channel), welcome new members, enforce usage limits through rate-limiting (messages and tokens) and role restrictions, allow exemptions, ignore specific roles, and provide clear notifications, all while being configurable via environment variables and deployable via Docker. It should also support automatic timed removal of restrictions.

## 2. Core Technologies
- Python: 3.8+
- Libraries:
    - discord.py: >=2.3.0 (Core Discord interaction)
    - python-dotenv: >=1.0.0 (Loading .env files)
    - aiohttp: >=3.9.0 (Async HTTP requests for LLM API)
    - redis: >=5.0.0 (Connecting to Redis for persistence and rate limiting)
    - tiktoken: >=0.5.0 (Token counting for LLM interactions)
- External Services:
    - Discord API
    - OpenWebUI Compatible LLM API (e.g., Ollama, LM Studio, vLLM)
    - Redis Server (v5.0+)
- Deployment: Docker, Docker Compose

## 3. Discord Intents & Permissions

### Intents
(Enabled in Discord Dev Portal & Code)
- `Guilds`: Basic server information and events.
- `Members (Privileged)`: Required for `on_member_join` and accessing member roles reliably, and for restriction removal task.
- `Message Content (Privileged)`: Required to read message content for processing.
### Bot Permissions (Required Role Permissions in Server)
- `View Channel`: See channels and read messages.
- `Send Messages`: Send replies, welcome messages, notifications.
- `Manage Roles`: Add/remove the `RESTRICTED_USER_ROLE_ID`. Bot role must be higher than the restricted role.
- `Read Message History`: Needed to resolve message references for replies.

## 4. Configuration (`.env` Variables)

All configurations are managed via an `.env` file in the project root.
- `DISCORD_BOT_TOKEN`: (Required) Your Discord bot token.
- `LOG_LEVEL`: (Optional, Default: INFO) Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).
- `OPENWEBUI_API_URL`: (Required) Base URL of the LLM API endpoint (e.g., http://host.docker.internal:8080).
- `OPENWEBUI_MODEL`: (Required) Name of the model to use via the API (e.g., llama3:latest).
- `OPENWEBUI_API_KEY`: (Optional) Bearer token API key if the endpoint requires authentication.
- `WELCOME_CHANNEL_ID`: (Optional) ID of the channel to send welcome messages. If unset, welcome messages disabled.
- `RESTRICTED_CHANNEL_ID`: (Required for restriction) ID of the channel where restricted users must interact. If unset, channel enforcement disabled.
- `RESPONSE_CHANCE`: (Optional, Default: 0.05) Float between 0.0 and 1.0 representing the random chance the bot responds to a non-mention/non-reply message.
- `MAX_HISTORY_PER_USER`: (Optional, Default: 20) Max number of message *pairs* (user+assistant) stored per user/channel context in Redis.
- `REDIS_HOST`: (Required for persistence/rate limits, Default: localhost) Hostname/IP of Redis server. Use 'redis' if using the default docker-compose service name.
- `REDIS_PORT`: (Optional, Default: 6379) Port of Redis server.
- `REDIS_DB`: (Optional, Default: 0) Redis database number for operational data (history, rate limits, restriction expiry).
- `REDIS_PASSWORD`: (Optional) Password for Redis authentication.
- `REDIS_DB_TEST`: (Optional, Default: 9) Redis database number used ONLY when running tests in `utils/webui_api.py`.
- `IGNORED_ROLE_IDS`: (Optional) Comma-separated list of Role IDs. Bot will ignore all messages from users with any of these roles.
- `RATE_LIMIT_COUNT`: (Optional, Default: 15) Max number of *interacting* messages per user per window before restriction.
- `RATE_LIMIT_WINDOW_SECONDS`: (Optional, Default: 60) Time window (seconds) for message and token rate limits.
- `TOKEN_RATE_LIMIT_COUNT`: (Optional, Default: 20000) Max total LLM tokens (prompt+completion) per user per window before restriction.
- `RESTRICTED_USER_ROLE_ID`: (Required for restriction) ID of the role assigned when limits are hit. MUST be created manually in Discord. If unset, restriction system disabled.
- `RATE_LIMIT_MESSAGE_USER`: (Optional, Default: Provided) Message template sent when rate limit is hit. `<#{channel_id}>` is replaced.
- `RESTRICTED_CHANNEL_MESSAGE_USER`: (Optional, Default: Provided) Message template sent when restricted user talks outside the allowed channel. `<#{channel_id}>` is replaced.
- `RATE_LIMIT_EXEMPT_ROLE_IDS`: (Optional) Comma-separated list of Role IDs. Users with these roles bypass all rate limits.
- `LIST_TOOLS`: (Optional) Comma-separated list of tool IDs for the LLM API (if supported).
- `KNOWLEDGE_ID`: (Optional) ID of knowledge base collection for the LLM API (if supported).
- `RESTRICTION_DURATION_SECONDS`: (Optional, Default: 86400) Duration in seconds for how long the restricted role should be applied. If 0 or not set, the role remains indefinitely (manual removal required).
- `RESTRICTION_CHECK_INTERVAL_SECONDS`: (Optional, Default: 300) How often (in seconds) the bot checks for expired restrictions. Must be > 0 if `RESTRICTION_DURATION_SECONDS` > 0.

## 5. File Structure
```
sstaffai/
├── .env
├── Dockerfile
├── docker-compose.yaml
├── main.py
├── bot.py
├── requirements.txt
├── README.md
├── specs.txt  &lt;-- This file
├── bot.log
│
├── cogs/
│   └── listener_cog.py
│
└── utils/
├── webui_api.py
├── prompts/
│   ├── personality_prompt.txt
│   ├── welcome_prompt.txt
│   └── welcome_system.txt
└── (optional test scripts)
```
## 6. Core Logic - `main.py`
- Sets up logging based on `LOG_LEVEL`.
- Loads all environment variables from `.env`.
- Performs validation checks for critical variables; exits if invalid.
- Loads prompt content from `utils/prompts/`.
- Parses configurations (e.g., splitting comma-separated IDs, converting types), including the new `RESTRICTION_DURATION_SECONDS` and `RESTRICTION_CHECK_INTERVAL_SECONDS`.
- Instantiates `AIBot`, passing all configuration values.
- Contains `main_run()` function to start the bot, handling login/intent errors.
- Entry point (`if __name__ == "__main__":`) calls `main_run()`.

## 7. Core Logic - `bot.py` (`AIBot` class)
- Subclasses `discord.ext.commands.Bot`.
- `__init__`: Accepts all configuration parameters from `main.py` and stores them as instance attributes (e.g., `self.restricted_user_role_id`, `self.restriction_duration_seconds`, `self.restriction_check_interval_seconds`).
- Initializes `self.ignored_role_ids_set` and `self.rate_limit_exempt_role_ids_set` as sets for efficient lookup. Initializes a general-purpose Redis client (`self.redis_client_general`) if config is provided.
- `setup_hook`: Asynchronously loads extensions listed (currently just `cogs.listener_cog`).
- `on_ready`: Logs bot readiness.

## 8. Core Logic - `utils/webui_api.py` (`WebUIAPI` class)
- (No changes for restriction expiry feature) Handles communication with the LLM API and Redis history persistence.
- ... (rest of webui_api.py specs as previously defined) ...

## 9. Core Logic - `cogs/listener_cog.py` (`ListenerCog` class)
- Handles `on_message` and `on_member_join`. Uses `discord.ext.tasks` for periodic checks.
- `__init__`: Gets `bot` instance, initializes `WebUIAPI`, gets reference to `bot.redis_client_general`. If `bot.restriction_duration_seconds > 0`, `bot.restriction_check_interval_seconds > 0`, and Redis is available, it starts the `check_restrictions_loop` background task.
- `on_message`:
    - **Filtering**: Ignores self, other bots, DMs. Checks against `bot.ignored_role_ids_set`.
    - **Engagement Logic (`should_respond` determination)**:
        - Determines if the bot should respond based on:
            1.  **Direct Mention (Case 1)**: User mentions the bot directly with content (not a reply).
            2.  **Reply to Bot (Cases 2 & 3)**: User replies directly to a message from the bot. Sub-logic differentiates these cases.
            3.  **Reply to User + Mention (Case 4)**: User replies to another user's message and also mentions the bot with content.
            4.  **Random Chance**: Based on `RESPONSE_CHANCE`.
        - If `should_respond` is `False`, the function exits early.
    - **Restricted User Channel Enforcement**:
        - This check is now performed **only if `should_respond` is `True`**.
        - If a user has the `bot.restricted_user_role_id` and attempts an interaction (`should_respond == True`) outside the `bot.restricted_channel_id`, a notification is sent, and the function returns (no further processing for that interaction).
    - **Rate Limiting**:
        - Performed if `should_respond` is true and the restricted channel check (if applicable) did not cause an exit.
        - Message rate limit (`msg_rl:` key in Redis) is checked first. If exceeded, `_apply_restriction` is called, a notification sent, and processing stops.
        - Token rate limit (`token_rl:` key in Redis) setup occurs, actual check happens after LLM response.
    - **Context Injection Logic**:
        - If `is_reply_to_bot` (Cases 2 or 3):
            - **Case 3 (External/Older Bot Context)**: If the bot message replied to was (a) a formal reply to a *different* user, OR (b) not a formal reply itself AND its content does *not* match the last bot message in the *current user's* history, then its content is captured as `extra_assistant_context` and `inject_context_for_saving` is set to `True`.
            - **Case 2 (Continuing Own Thread)**: Otherwise, no `extra_assistant_context` is set from this block, and `inject_context_for_saving` remains `False` from this block (preventing duplicate history saves).
        - If **Case 4 (Reply to User + Mention)**: The content of the *other user's message* (that was replied to) is captured as `extra_assistant_context`, and `inject_context_for_saving` is set to `True`.
    - **LLM Call (`api_client.generate_response`)**:
        - Passes `user_id`, `channel_id`, `prompt`, system message, `current_history` (fetched for the user), and any `extra_assistant_context` determined above.
    - **History Saving (`api_client.save_context_history`)**:
        - If `inject_context_for_saving` is true, the `extra_assistant_context` (from Case 3 or 4) is added to the history list (as role: assistant) before the current user's prompt and the new bot response. The combined history is then saved.
    - **Token Rate Limit Application**: After a successful LLM response, if applicable, the token usage is recorded. If the token limit is exceeded, `_apply_restriction` is called, and a notification is sent.
- `_apply_restriction` (Helper):
    - Adds the `RESTRICTED_USER_ROLE_ID` to the member.
    - **NEW**: If `bot.restriction_duration_seconds > 0` and Redis is available, it calculates an expiry timestamp (`time.time() + bot.restriction_duration_seconds`) and stores this timestamp in Redis under a key like `restricted_until:{guild_id}:{user_id}`. The Redis key is set with a TTL slightly longer than the duration itself for eventual cleanup by Redis if the bot misses it.
- **New Background Task `check_restrictions_loop`**:
    - Decorated with `@tasks.loop()`. The interval is configured by `bot.restriction_check_interval_seconds`.
    - Runs only if `bot.restriction_duration_seconds > 0`, `bot.restricted_user_role_id` is set, and Redis is available.
    - Periodically (e.g., every 5 minutes) scans Redis for keys matching the pattern `restricted_until:{guild_id}:*`.
    - For each key found:
        - Parses guild ID and user ID from the key.
        - Retrieves the stored expiry timestamp.
        - If `current_time >= expiry_timestamp`:
            - Fetches the `guild` and `member` objects.
            - Fetches the `restricted_role` object.
            - If the member still has the restricted role, attempts to remove it using `member.remove_roles()`.
            - Logs the outcome (success, role already removed, member/guild/role not found, permission error).
            - Deletes the `restricted_until:{guild_id}:{user_id}` key from Redis upon successful processing or if the user/guild is no longer accessible.
    - Includes a `@check_restrictions_loop.before_loop` to `await bot.wait_until_ready()`.
    - Includes comprehensive error handling for Redis operations and Discord API calls within the loop.
- `on_member_join`: Handles welcome messages (logic largely unchanged).

## 10. Prompt Files (`utils/prompts/`)
- (No changes for these features)

## 11. Docker Setup
- (No changes for these features, relies on `.env` file for new variables)

## 12. Redis Data Structures (Examples)
- `discord_context:{user_id}:{channel_id}` (STRING): Stores JSON representation of the `List[Dict[str, str]]` conversation history. Managed by `WebUIAPI`.
- `msg_rl:{guild_id}:{user_id}` (LIST): Stores timestamps (as strings/floats) of recent interacting messages for message rate limit. Managed by `ListenerCog`. TTL set (e.g., `RATE_LIMIT_WINDOW_SECONDS + 120s`).
- `token_rl:{guild_id}:{user_id}` (LIST): Stores strings like `"timestamp:token_count"` for recent interactions for token rate limit. Managed by `ListenerCog`. TTL set (e.g., `RATE_LIMIT_WINDOW_SECONDS + 120s`).
- `restricted_until:{guild_id}:{user_id}` (STRING): **NEW**. Stores the UNIX timestamp (float) indicating when a user's restriction should automatically expire. Set by `_apply_restriction` if `RESTRICTION_DURATION_SECONDS > 0`. Read and deleted by the `check_restrictions_loop` task. The key itself in Redis is also set with a TTL (e.g., `RESTRICTION_DURATION_SECONDS + 3600s`) for Redis-side cleanup.